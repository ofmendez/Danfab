//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/ofmendez/DataDocs/Work/Ubuntu/LENGUAJES/Danfab/projectUnity/Danfab/Assets/Antlr4/Grammar.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, TRUE=26, FALSE=27, NOT=28, RELATIONAL=29, EQUALITY_NUMERIC=30, 
		AND=31, OR=32, ID=33, COMMENT=34, DOUBLE=35, INTEGER=36, STRING=37, MUL=38, 
		SUM=39, NEGATIVE=40, WS=41, ErrorChar=42;
	public const int
		RULE_principal = 0, RULE_block = 1, RULE_function_call = 2, RULE_arrayPosition = 3, 
		RULE_print = 4, RULE_arraysize = 5, RULE_if_regular = 6, RULE_if_return = 7, 
		RULE_if_break_continue = 8, RULE_if_return_break_continue = 9, RULE_switch_regular = 10, 
		RULE_switch_return = 11, RULE_switch_break_continue = 12, RULE_switch_return_break_continue = 13, 
		RULE_while_regular = 14, RULE_while_return = 15, RULE_function = 16, RULE_body = 17, 
		RULE_body_regular = 18, RULE_body_return = 19, RULE_return_regular = 20, 
		RULE_body_break_continue = 21, RULE_body_return_break_continue = 22, RULE_expression = 23, 
		RULE_expressionContent = 24, RULE_dataType = 25;
	public static readonly string[] ruleNames = {
		"principal", "block", "function_call", "arrayPosition", "print", "arraysize", 
		"if_regular", "if_return", "if_break_continue", "if_return_break_continue", 
		"switch_regular", "switch_return", "switch_break_continue", "switch_return_break_continue", 
		"while_regular", "while_return", "function", "body", "body_regular", "body_return", 
		"return_regular", "body_break_continue", "body_return_break_continue", 
		"expression", "expressionContent", "dataType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'usa'", "'nada'", "','", "'en'", "'imprima'", "'tama\u00F1o'", 
		"'de'", "'si'", "'entonces'", "'o_si'", "'sino'", "'fin'", "'cuando'", 
		"'escoge'", "'case'", "'entonce'", "'mientras'", "'como'", "':'", "'lista'", 
		"'responde'", "'interrumpir'", "'continuar'", "'('", "')'", "'verdadero'", 
		"'falso'", "'negar'", null, null, "'y_logico'", "'o_logico'", null, null, 
		null, null, null, null, "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "TRUE", "FALSE", "NOT", "RELATIONAL", "EQUALITY_NUMERIC", 
		"AND", "OR", "ID", "COMMENT", "DOUBLE", "INTEGER", "STRING", "MUL", "SUM", 
		"NEGATIVE", "WS", "ErrorChar"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class PrincipalContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PrincipalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrincipalContext principal() {
		PrincipalContext _localctx = new PrincipalContext(Context, State);
		EnterRule(_localctx, 0, RULE_principal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public If_regularContext if_regular() {
			return GetRuleContext<If_regularContext>(0);
		}
		public Switch_regularContext switch_regular() {
			return GetRuleContext<Switch_regularContext>(0);
		}
		public While_regularContext while_regular() {
			return GetRuleContext<While_regularContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; body();
				State = 55; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; function();
				State = 58; block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60; if_regular();
				State = 61; block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; switch_regular();
				State = 64; block();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 66; while_regular();
				State = 67; block();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_call);
		try {
			int _alt;
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; Match(T__0);
				State = 73; Match(ID);
				State = 74; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; Match(T__0);
				State = 76; Match(ID);
				State = 77; expression();
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 78; Match(T__2);
						State = 79; expression();
						}
						} 
					}
					State = 84;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayPositionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayPosition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayPositionContext arrayPosition() {
		ArrayPositionContext _localctx = new ArrayPositionContext(Context, State);
		EnterRule(_localctx, 6, RULE_arrayPosition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(ID);
			State = 88; Match(T__3);
			State = 89; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 8, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(T__4);
			State = 92; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraysizeContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ArraysizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraysize; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraysize(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraysizeContext arraysize() {
		ArraysizeContext _localctx = new ArraysizeContext(Context, State);
		EnterRule(_localctx, 10, RULE_arraysize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(T__5);
			State = 95; Match(T__6);
			State = 96; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_regularContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Body_regularContext[] body_regular() {
			return GetRuleContexts<Body_regularContext>();
		}
		public Body_regularContext body_regular(int i) {
			return GetRuleContext<Body_regularContext>(i);
		}
		public If_regularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_regular; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_regular(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_regularContext if_regular() {
		If_regularContext _localctx = new If_regularContext(Context, State);
		EnterRule(_localctx, 12, RULE_if_regular);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(T__7);
			State = 99; expression();
			State = 100; Match(T__8);
			State = 101; body_regular();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 102; Match(T__9);
				State = 103; expression();
				State = 104; Match(T__8);
				State = 105; body_regular();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 112; Match(T__10);
				State = 113; body_regular();
				}
			}

			State = 116; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_returnContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Body_returnContext[] body_return() {
			return GetRuleContexts<Body_returnContext>();
		}
		public Body_returnContext body_return(int i) {
			return GetRuleContext<Body_returnContext>(i);
		}
		public If_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_returnContext if_return() {
		If_returnContext _localctx = new If_returnContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(T__7);
			State = 119; expression();
			State = 120; Match(T__8);
			State = 121; body_return();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 122; Match(T__9);
				State = 123; expression();
				State = 124; Match(T__8);
				State = 125; body_return();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 132; Match(T__10);
				State = 133; body_return();
				}
			}

			State = 136; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_break_continueContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Body_break_continueContext[] body_break_continue() {
			return GetRuleContexts<Body_break_continueContext>();
		}
		public Body_break_continueContext body_break_continue(int i) {
			return GetRuleContext<Body_break_continueContext>(i);
		}
		public If_break_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_break_continue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_break_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_break_continueContext if_break_continue() {
		If_break_continueContext _localctx = new If_break_continueContext(Context, State);
		EnterRule(_localctx, 16, RULE_if_break_continue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(T__7);
			State = 139; expression();
			State = 140; Match(T__8);
			State = 141; body_break_continue();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 142; Match(T__9);
				State = 143; expression();
				State = 144; Match(T__8);
				State = 145; body_break_continue();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 152; Match(T__10);
				State = 153; body_break_continue();
				}
			}

			State = 156; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_return_break_continueContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Body_return_break_continueContext[] body_return_break_continue() {
			return GetRuleContexts<Body_return_break_continueContext>();
		}
		public Body_return_break_continueContext body_return_break_continue(int i) {
			return GetRuleContext<Body_return_break_continueContext>(i);
		}
		public If_return_break_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_return_break_continue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_return_break_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_return_break_continueContext if_return_break_continue() {
		If_return_break_continueContext _localctx = new If_return_break_continueContext(Context, State);
		EnterRule(_localctx, 18, RULE_if_return_break_continue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(T__7);
			State = 159; expression();
			State = 160; Match(T__8);
			State = 161; body_return_break_continue();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 162; Match(T__9);
				State = 163; expression();
				State = 164; Match(T__8);
				State = 165; body_return_break_continue();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 172; Match(T__10);
				State = 173; body_return_break_continue();
				}
			}

			State = 176; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_regularContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		public Body_regularContext[] body_regular() {
			return GetRuleContexts<Body_regularContext>();
		}
		public Body_regularContext body_regular(int i) {
			return GetRuleContext<Body_regularContext>(i);
		}
		public Switch_regularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_regular; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_regular(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_regularContext switch_regular() {
		Switch_regularContext _localctx = new Switch_regularContext(Context, State);
		EnterRule(_localctx, 20, RULE_switch_regular);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(T__12);
			State = 179; Match(ID);
			State = 180; Match(T__13);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 181; Match(T__14);
				State = 182; dataType();
				State = 183; Match(T__15);
				State = 184; body_regular();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__14 );
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 190; Match(T__10);
				State = 191; body_regular();
				}
			}

			State = 194; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_returnContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		public Body_returnContext[] body_return() {
			return GetRuleContexts<Body_returnContext>();
		}
		public Body_returnContext body_return(int i) {
			return GetRuleContext<Body_returnContext>(i);
		}
		public Switch_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_returnContext switch_return() {
		Switch_returnContext _localctx = new Switch_returnContext(Context, State);
		EnterRule(_localctx, 22, RULE_switch_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T__12);
			State = 197; Match(ID);
			State = 198; Match(T__13);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 199; Match(T__14);
				State = 200; dataType();
				State = 201; Match(T__15);
				State = 202; body_return();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__14 );
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 208; Match(T__10);
				State = 209; body_return();
				}
			}

			State = 212; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_break_continueContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		public Body_break_continueContext[] body_break_continue() {
			return GetRuleContexts<Body_break_continueContext>();
		}
		public Body_break_continueContext body_break_continue(int i) {
			return GetRuleContext<Body_break_continueContext>(i);
		}
		public Switch_break_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_break_continue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_break_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_break_continueContext switch_break_continue() {
		Switch_break_continueContext _localctx = new Switch_break_continueContext(Context, State);
		EnterRule(_localctx, 24, RULE_switch_break_continue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(T__12);
			State = 215; Match(ID);
			State = 216; Match(T__13);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 217; Match(T__14);
				State = 218; dataType();
				State = 219; Match(T__15);
				State = 220; body_break_continue();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__14 );
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 226; Match(T__10);
				State = 227; body_break_continue();
				}
			}

			State = 230; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_return_break_continueContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public DataTypeContext[] dataType() {
			return GetRuleContexts<DataTypeContext>();
		}
		public DataTypeContext dataType(int i) {
			return GetRuleContext<DataTypeContext>(i);
		}
		public Body_return_break_continueContext[] body_return_break_continue() {
			return GetRuleContexts<Body_return_break_continueContext>();
		}
		public Body_return_break_continueContext body_return_break_continue(int i) {
			return GetRuleContext<Body_return_break_continueContext>(i);
		}
		public Switch_return_break_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_return_break_continue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_return_break_continue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_return_break_continueContext switch_return_break_continue() {
		Switch_return_break_continueContext _localctx = new Switch_return_break_continueContext(Context, State);
		EnterRule(_localctx, 26, RULE_switch_return_break_continue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(T__12);
			State = 233; Match(ID);
			State = 234; Match(T__13);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 235; Match(T__14);
				State = 236; dataType();
				State = 237; Match(T__15);
				State = 238; body_return_break_continue();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__14 );
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 244; Match(T__10);
				State = 245; body_return_break_continue();
				}
			}

			State = 248; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_regularContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Body_break_continueContext body_break_continue() {
			return GetRuleContext<Body_break_continueContext>(0);
		}
		public While_regularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_regular; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_regular(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_regularContext while_regular() {
		While_regularContext _localctx = new While_regularContext(Context, State);
		EnterRule(_localctx, 28, RULE_while_regular);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(T__16);
			State = 251; expression();
			State = 252; Match(T__8);
			State = 253; body_break_continue();
			State = 254; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_returnContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Body_return_break_continueContext body_return_break_continue() {
			return GetRuleContext<Body_return_break_continueContext>(0);
		}
		public While_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_returnContext while_return() {
		While_returnContext _localctx = new While_returnContext(Context, State);
		EnterRule(_localctx, 30, RULE_while_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(T__16);
			State = 257; expression();
			State = 258; Match(T__8);
			State = 259; body_return_break_continue();
			State = 260; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(GrammarParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GrammarParser.ID, i);
		}
		public Body_returnContext body_return() {
			return GetRuleContext<Body_returnContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_function);
		int _la;
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262; Match(ID);
				State = 263; Match(T__0);
				State = 264; Match(T__1);
				State = 265; Match(T__17);
				State = 266; body_return();
				State = 267; Match(T__11);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; Match(ID);
				State = 270; Match(T__0);
				State = 271; Match(ID);
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 272; Match(T__2);
					State = 273; Match(ID);
					}
					}
					State = 278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 279; Match(T__17);
				State = 280; body_return();
				State = 281; Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
	 
		public BodyContext() { }
		public virtual void CopyFrom(BodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BodyPrintContext : BodyContext {
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public BodyPrintContext(BodyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodyPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BodyArrayPositionContext : BodyContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BodyArrayPositionContext(BodyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodyArrayPosition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BodyAssignVariableContext : BodyContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BodyAssignVariableContext(BodyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodyAssignVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BodyArrayDeclarationContext : BodyContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BodyArrayDeclarationContext(BodyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodyArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BodyFunctionCallContext : BodyContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public BodyFunctionCallContext(BodyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodyFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_body);
		try {
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new BodyPrintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 285; print();
				}
				break;
			case 2:
				_localctx = new BodyFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; function_call();
				}
				break;
			case 3:
				_localctx = new BodyAssignVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 287; Match(ID);
				State = 288; Match(T__18);
				State = 289; expression();
				}
				break;
			case 4:
				_localctx = new BodyArrayPositionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 290; Match(ID);
				State = 291; Match(T__3);
				State = 292; expression();
				State = 293; Match(T__18);
				State = 294; expression();
				}
				break;
			case 5:
				_localctx = new BodyArrayDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 296; Match(T__19);
				State = 297; Match(ID);
				State = 298; Match(T__6);
				State = 299; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_regularContext : ParserRuleContext {
		public Body_regularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_regular; } }
	 
		public Body_regularContext() { }
		public virtual void CopyFrom(Body_regularContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Body_regularEpsilonContext : Body_regularContext {
		public Body_regularEpsilonContext(Body_regularContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_regularEpsilon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_regularSwRegularContext : Body_regularContext {
		public Switch_regularContext switch_regular() {
			return GetRuleContext<Switch_regularContext>(0);
		}
		public Body_regularContext body_regular() {
			return GetRuleContext<Body_regularContext>(0);
		}
		public Body_regularSwRegularContext(Body_regularContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_regularSwRegular(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_regularBodyContext : Body_regularContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Body_regularContext body_regular() {
			return GetRuleContext<Body_regularContext>(0);
		}
		public Body_regularBodyContext(Body_regularContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_regularBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_regularWhileRegularContext : Body_regularContext {
		public While_regularContext while_regular() {
			return GetRuleContext<While_regularContext>(0);
		}
		public Body_regularContext body_regular() {
			return GetRuleContext<Body_regularContext>(0);
		}
		public Body_regularWhileRegularContext(Body_regularContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_regularWhileRegular(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_regularIfRegularContext : Body_regularContext {
		public If_regularContext if_regular() {
			return GetRuleContext<If_regularContext>(0);
		}
		public Body_regularContext body_regular() {
			return GetRuleContext<Body_regularContext>(0);
		}
		public Body_regularIfRegularContext(Body_regularContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_regularIfRegular(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_regularContext body_regular() {
		Body_regularContext _localctx = new Body_regularContext(Context, State);
		EnterRule(_localctx, 36, RULE_body_regular);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__4:
			case T__19:
			case ID:
				_localctx = new Body_regularBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 302; body();
				State = 303; body_regular();
				}
				break;
			case T__7:
				_localctx = new Body_regularIfRegularContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; if_regular();
				State = 306; body_regular();
				}
				break;
			case T__12:
				_localctx = new Body_regularSwRegularContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 308; switch_regular();
				State = 309; body_regular();
				}
				break;
			case T__16:
				_localctx = new Body_regularWhileRegularContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 311; while_regular();
				State = 312; body_regular();
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case T__14:
				_localctx = new Body_regularEpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_returnContext : ParserRuleContext {
		public Body_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_return; } }
	 
		public Body_returnContext() { }
		public virtual void CopyFrom(Body_returnContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Body_returnIfReturnContext : Body_returnContext {
		public If_returnContext if_return() {
			return GetRuleContext<If_returnContext>(0);
		}
		public Body_returnContext body_return() {
			return GetRuleContext<Body_returnContext>(0);
		}
		public Body_returnIfReturnContext(Body_returnContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_returnIfReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_returnEpsilonContext : Body_returnContext {
		public Body_returnEpsilonContext(Body_returnContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_returnEpsilon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_returnBodyContext : Body_returnContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Body_returnContext body_return() {
			return GetRuleContext<Body_returnContext>(0);
		}
		public Body_returnBodyContext(Body_returnContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_returnBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_returnSwitchReturnContext : Body_returnContext {
		public Switch_returnContext switch_return() {
			return GetRuleContext<Switch_returnContext>(0);
		}
		public Body_returnContext body_return() {
			return GetRuleContext<Body_returnContext>(0);
		}
		public Body_returnSwitchReturnContext(Body_returnContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_returnSwitchReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_returnReturnregularContext : Body_returnContext {
		public Return_regularContext return_regular() {
			return GetRuleContext<Return_regularContext>(0);
		}
		public Body_returnContext body_return() {
			return GetRuleContext<Body_returnContext>(0);
		}
		public Body_returnReturnregularContext(Body_returnContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_returnReturnregular(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_returWhileReturnContext : Body_returnContext {
		public While_returnContext while_return() {
			return GetRuleContext<While_returnContext>(0);
		}
		public Body_returnContext body_return() {
			return GetRuleContext<Body_returnContext>(0);
		}
		public Body_returWhileReturnContext(Body_returnContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_returWhileReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_returnContext body_return() {
		Body_returnContext _localctx = new Body_returnContext(Context, State);
		EnterRule(_localctx, 38, RULE_body_return);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__4:
			case T__19:
			case ID:
				_localctx = new Body_returnBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 317; body();
				State = 318; body_return();
				}
				break;
			case T__7:
				_localctx = new Body_returnIfReturnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 320; if_return();
				State = 321; body_return();
				}
				break;
			case T__12:
				_localctx = new Body_returnSwitchReturnContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 323; switch_return();
				State = 324; body_return();
				}
				break;
			case T__16:
				_localctx = new Body_returWhileReturnContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 326; while_return();
				State = 327; body_return();
				}
				break;
			case T__20:
				_localctx = new Body_returnReturnregularContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 329; return_regular();
				State = 330; body_return();
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case T__14:
				_localctx = new Body_returnEpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_regularContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_regularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_regular; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_regular(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_regularContext return_regular() {
		Return_regularContext _localctx = new Return_regularContext(Context, State);
		EnterRule(_localctx, 40, RULE_return_regular);
		int _la;
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 335; Match(T__20);
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 336; Match(T__1);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; Match(T__20);
				State = 340; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_break_continueContext : ParserRuleContext {
		public Body_break_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_break_continue; } }
	 
		public Body_break_continueContext() { }
		public virtual void CopyFrom(Body_break_continueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Body_BC_SwitchBCContext : Body_break_continueContext {
		public Switch_break_continueContext switch_break_continue() {
			return GetRuleContext<Switch_break_continueContext>(0);
		}
		public Body_break_continueContext body_break_continue() {
			return GetRuleContext<Body_break_continueContext>(0);
		}
		public Body_BC_SwitchBCContext(Body_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_BC_SwitchBC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_BC_WhileRegularContext : Body_break_continueContext {
		public While_regularContext while_regular() {
			return GetRuleContext<While_regularContext>(0);
		}
		public Body_break_continueContext body_break_continue() {
			return GetRuleContext<Body_break_continueContext>(0);
		}
		public Body_BC_WhileRegularContext(Body_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_BC_WhileRegular(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_BC_BCContext : Body_break_continueContext {
		public IToken bc;
		public Body_break_continueContext body_break_continue() {
			return GetRuleContext<Body_break_continueContext>(0);
		}
		public Body_BC_BCContext(Body_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_BC_BC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_BC_BodyContext : Body_break_continueContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Body_break_continueContext body_break_continue() {
			return GetRuleContext<Body_break_continueContext>(0);
		}
		public Body_BC_BodyContext(Body_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_BC_Body(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_BC_EpsilonContext : Body_break_continueContext {
		public Body_BC_EpsilonContext(Body_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_BC_Epsilon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_BC_IfBCContext : Body_break_continueContext {
		public If_break_continueContext if_break_continue() {
			return GetRuleContext<If_break_continueContext>(0);
		}
		public Body_break_continueContext body_break_continue() {
			return GetRuleContext<Body_break_continueContext>(0);
		}
		public Body_BC_IfBCContext(Body_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_BC_IfBC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_break_continueContext body_break_continue() {
		Body_break_continueContext _localctx = new Body_break_continueContext(Context, State);
		EnterRule(_localctx, 42, RULE_body_break_continue);
		int _la;
		try {
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__4:
			case T__19:
			case ID:
				_localctx = new Body_BC_BodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; body();
				State = 344; body_break_continue();
				}
				break;
			case T__7:
				_localctx = new Body_BC_IfBCContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; if_break_continue();
				State = 347; body_break_continue();
				}
				break;
			case T__12:
				_localctx = new Body_BC_SwitchBCContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 349; switch_break_continue();
				State = 350; body_break_continue();
				}
				break;
			case T__16:
				_localctx = new Body_BC_WhileRegularContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 352; while_regular();
				State = 353; body_break_continue();
				}
				break;
			case T__21:
			case T__22:
				_localctx = new Body_BC_BCContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 355;
				((Body_BC_BCContext)_localctx).bc = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__21 || _la==T__22) ) {
					((Body_BC_BCContext)_localctx).bc = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 356; body_break_continue();
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case T__14:
				_localctx = new Body_BC_EpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_return_break_continueContext : ParserRuleContext {
		public Body_return_break_continueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_return_break_continue; } }
	 
		public Body_return_break_continueContext() { }
		public virtual void CopyFrom(Body_return_break_continueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Body_RBC_BodyContext : Body_return_break_continueContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Body_return_break_continueContext body_return_break_continue() {
			return GetRuleContext<Body_return_break_continueContext>(0);
		}
		public Body_RBC_BodyContext(Body_return_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_RBC_Body(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_RBC_ReturnContext : Body_return_break_continueContext {
		public Return_regularContext return_regular() {
			return GetRuleContext<Return_regularContext>(0);
		}
		public Body_return_break_continueContext body_return_break_continue() {
			return GetRuleContext<Body_return_break_continueContext>(0);
		}
		public Body_RBC_ReturnContext(Body_return_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_RBC_Return(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_RBC_EpsilonContext : Body_return_break_continueContext {
		public Body_RBC_EpsilonContext(Body_return_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_RBC_Epsilon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_RBC_BCContext : Body_return_break_continueContext {
		public IToken bc;
		public Body_return_break_continueContext body_return_break_continue() {
			return GetRuleContext<Body_return_break_continueContext>(0);
		}
		public Body_RBC_BCContext(Body_return_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_RBC_BC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_RBC_WhileReturnContext : Body_return_break_continueContext {
		public While_returnContext while_return() {
			return GetRuleContext<While_returnContext>(0);
		}
		public Body_return_break_continueContext body_return_break_continue() {
			return GetRuleContext<Body_return_break_continueContext>(0);
		}
		public Body_RBC_WhileReturnContext(Body_return_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_RBC_WhileReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_RBC_SwitchRBCContext : Body_return_break_continueContext {
		public Switch_return_break_continueContext switch_return_break_continue() {
			return GetRuleContext<Switch_return_break_continueContext>(0);
		}
		public Body_return_break_continueContext body_return_break_continue() {
			return GetRuleContext<Body_return_break_continueContext>(0);
		}
		public Body_RBC_SwitchRBCContext(Body_return_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_RBC_SwitchRBC(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Body_RBC_IfRBCContext : Body_return_break_continueContext {
		public If_return_break_continueContext if_return_break_continue() {
			return GetRuleContext<If_return_break_continueContext>(0);
		}
		public Body_return_break_continueContext body_return_break_continue() {
			return GetRuleContext<Body_return_break_continueContext>(0);
		}
		public Body_RBC_IfRBCContext(Body_return_break_continueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_RBC_IfRBC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_return_break_continueContext body_return_break_continue() {
		Body_return_break_continueContext _localctx = new Body_return_break_continueContext(Context, State);
		EnterRule(_localctx, 44, RULE_body_return_break_continue);
		int _la;
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__4:
			case T__19:
			case ID:
				_localctx = new Body_RBC_BodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 360; body();
				State = 361; body_return_break_continue();
				}
				break;
			case T__7:
				_localctx = new Body_RBC_IfRBCContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; if_return_break_continue();
				State = 364; body_return_break_continue();
				}
				break;
			case T__12:
				_localctx = new Body_RBC_SwitchRBCContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 366; switch_return_break_continue();
				State = 367; body_return_break_continue();
				}
				break;
			case T__16:
				_localctx = new Body_RBC_WhileReturnContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 369; while_return();
				State = 370; body_return_break_continue();
				}
				break;
			case T__21:
			case T__22:
				_localctx = new Body_RBC_BCContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 372;
				((Body_RBC_BCContext)_localctx).bc = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__21 || _la==T__22) ) {
					((Body_RBC_BCContext)_localctx).bc = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 373; body_return_break_continue();
				}
				break;
			case T__20:
				_localctx = new Body_RBC_ReturnContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 374; return_regular();
				State = 375; body_return_break_continue();
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case T__14:
				_localctx = new Body_RBC_EpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContentContext expressionContent() {
			return GetRuleContext<ExpressionContentContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; expressionContent(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContentContext : ParserRuleContext {
		public ExpressionContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionContent; } }
	 
		public ExpressionContentContext() { }
		public virtual void CopyFrom(ExpressionContentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionContentFunctionCallContext : ExpressionContentContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContentFunctionCallContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentSumOrNegContext : ExpressionContentContext {
		public ExpressionContentContext[] expressionContent() {
			return GetRuleContexts<ExpressionContentContext>();
		}
		public ExpressionContentContext expressionContent(int i) {
			return GetRuleContext<ExpressionContentContext>(i);
		}
		public ITerminalNode SUM() { return GetToken(GrammarParser.SUM, 0); }
		public ITerminalNode NEGATIVE() { return GetToken(GrammarParser.NEGATIVE, 0); }
		public ExpressionContentSumOrNegContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentSumOrNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentRelationalContext : ExpressionContentContext {
		public ExpressionContentContext[] expressionContent() {
			return GetRuleContexts<ExpressionContentContext>();
		}
		public ExpressionContentContext expressionContent(int i) {
			return GetRuleContext<ExpressionContentContext>(i);
		}
		public ITerminalNode RELATIONAL() { return GetToken(GrammarParser.RELATIONAL, 0); }
		public ExpressionContentRelationalContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentequalityContext : ExpressionContentContext {
		public ExpressionContentContext[] expressionContent() {
			return GetRuleContexts<ExpressionContentContext>();
		}
		public ExpressionContentContext expressionContent(int i) {
			return GetRuleContext<ExpressionContentContext>(i);
		}
		public ITerminalNode EQUALITY_NUMERIC() { return GetToken(GrammarParser.EQUALITY_NUMERIC, 0); }
		public ExpressionContentequalityContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentequality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentContentOrContext : ExpressionContentContext {
		public ExpressionContentContext[] expressionContent() {
			return GetRuleContexts<ExpressionContentContext>();
		}
		public ExpressionContentContext expressionContent(int i) {
			return GetRuleContext<ExpressionContentContext>(i);
		}
		public ITerminalNode OR() { return GetToken(GrammarParser.OR, 0); }
		public ExpressionContentContentOrContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentContentOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentIDContext : ExpressionContentContext {
		public ITerminalNode ID() { return GetToken(GrammarParser.ID, 0); }
		public ExpressionContentIDContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentArraySizeContext : ExpressionContentContext {
		public ArraysizeContext arraysize() {
			return GetRuleContext<ArraysizeContext>(0);
		}
		public ExpressionContentArraySizeContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentArraySize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentMulContext : ExpressionContentContext {
		public ExpressionContentContext[] expressionContent() {
			return GetRuleContexts<ExpressionContentContext>();
		}
		public ExpressionContentContext expressionContent(int i) {
			return GetRuleContext<ExpressionContentContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(GrammarParser.MUL, 0); }
		public ExpressionContentMulContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentNegativeContext : ExpressionContentContext {
		public ITerminalNode NEGATIVE() { return GetToken(GrammarParser.NEGATIVE, 0); }
		public ExpressionContentContext expressionContent() {
			return GetRuleContext<ExpressionContentContext>(0);
		}
		public ExpressionContentNegativeContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentParenthesisContext : ExpressionContentContext {
		public ExpressionContentContext expressionContent() {
			return GetRuleContext<ExpressionContentContext>(0);
		}
		public ExpressionContentParenthesisContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentArrayPositionContext : ExpressionContentContext {
		public ArrayPositionContext arrayPosition() {
			return GetRuleContext<ArrayPositionContext>(0);
		}
		public ExpressionContentArrayPositionContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentArrayPosition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentAndContext : ExpressionContentContext {
		public ExpressionContentContext[] expressionContent() {
			return GetRuleContexts<ExpressionContentContext>();
		}
		public ExpressionContentContext expressionContent(int i) {
			return GetRuleContext<ExpressionContentContext>(i);
		}
		public ITerminalNode AND() { return GetToken(GrammarParser.AND, 0); }
		public ExpressionContentAndContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentdataTypeContext : ExpressionContentContext {
		public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public ExpressionContentdataTypeContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentdataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContentNotContext : ExpressionContentContext {
		public ITerminalNode NOT() { return GetToken(GrammarParser.NOT, 0); }
		public ExpressionContentContext expressionContent() {
			return GetRuleContext<ExpressionContentContext>(0);
		}
		public ExpressionContentNotContext(ExpressionContentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContentNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContentContext expressionContent() {
		return expressionContent(0);
	}

	private ExpressionContentContext expressionContent(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContentContext _localctx = new ExpressionContentContext(Context, _parentState);
		ExpressionContentContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_expressionContent, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				_localctx = new ExpressionContentParenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 383; Match(T__23);
				State = 384; expressionContent(0);
				State = 385; Match(T__24);
				}
				break;
			case 2:
				{
				_localctx = new ExpressionContentNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 387; Match(NOT);
				State = 388; expressionContent(13);
				}
				break;
			case 3:
				{
				_localctx = new ExpressionContentNegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 389; Match(NEGATIVE);
				State = 390; expressionContent(12);
				}
				break;
			case 4:
				{
				_localctx = new ExpressionContentdataTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 391; dataType();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionContentIDContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392; Match(ID);
				}
				break;
			case 6:
				{
				_localctx = new ExpressionContentArrayPositionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 393; arrayPosition();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionContentFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394; function_call();
				}
				break;
			case 8:
				{
				_localctx = new ExpressionContentArraySizeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 395; arraysize();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 416;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContentMulContext(new ExpressionContentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionContent);
						State = 398;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 399; Match(MUL);
						State = 400; expressionContent(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContentSumOrNegContext(new ExpressionContentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionContent);
						State = 401;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 402;
						_la = TokenStream.LA(1);
						if ( !(_la==SUM || _la==NEGATIVE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 403; expressionContent(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContentRelationalContext(new ExpressionContentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionContent);
						State = 404;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 405; Match(RELATIONAL);
						State = 406; expressionContent(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContentequalityContext(new ExpressionContentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionContent);
						State = 407;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 408; Match(EQUALITY_NUMERIC);
						State = 409; expressionContent(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContentAndContext(new ExpressionContentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionContent);
						State = 410;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 411; Match(AND);
						State = 412; expressionContent(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContentContentOrContext(new ExpressionContentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionContent);
						State = 413;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 414; Match(OR);
						State = 415; expressionContent(7);
						}
						break;
					}
					} 
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(GrammarParser.INTEGER, 0); }
		public ITerminalNode DOUBLE() { return GetToken(GrammarParser.DOUBLE, 0); }
		public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		public ITerminalNode TRUE() { return GetToken(GrammarParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(GrammarParser.FALSE, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_dataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << DOUBLE) | (1L << INTEGER) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return expressionContent_sempred((ExpressionContentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionContent_sempred(ExpressionContentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\x1AA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'I', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'S', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'V', '\v', '\x4', '\x5', 
		'\x4', 'X', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', 'n', '\n', '\b', '\f', '\b', '\xE', '\b', 'q', '\v', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'u', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x82', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\x85', '\v', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x89', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x96', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x99', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x9D', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xAA', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xAD', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xB1', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x6', '\f', '\xBD', '\n', '\f', '\r', '\f', '\xE', 
		'\f', '\xBE', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xC3', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', 
		'\xCF', '\n', '\r', '\r', '\r', '\xE', '\r', '\xD0', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xD5', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x6', '\xE', '\xE1', '\n', '\xE', 
		'\r', '\xE', '\xE', '\xE', '\xE2', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xE7', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x6', '\xF', '\xF3', '\n', '\xF', '\r', '\xF', 
		'\xE', '\xF', '\xF4', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xF9', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x115', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x118', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x11E', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x12F', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x13E', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x150', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x154', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x158', '\n', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x169', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x17D', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x18F', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', 
		'\x1A', '\x1A3', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x1A6', '\v', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x2', '\x3', '\x32', 
		'\x1C', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x2', '\x5', '\x3', '\x2', '\x18', 
		'\x19', '\x3', '\x2', ')', '*', '\x4', '\x2', '\x1C', '\x1D', '%', '\'', 
		'\x2', '\x1CF', '\x2', '\x36', '\x3', '\x2', '\x2', '\x2', '\x4', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'W', '\x3', '\x2', '\x2', '\x2', '\b', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\n', ']', '\x3', '\x2', '\x2', '\x2', 
		'\f', '`', '\x3', '\x2', '\x2', '\x2', '\xE', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'x', '\x3', '\x2', '\x2', '\x2', '\x12', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\x18', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xFC', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\"', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x12E', '\x3', '\x2', '\x2', '\x2', '&', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x14F', '\x3', '\x2', '\x2', '\x2', '*', '\x157', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x30', '\x17E', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x5', '\x4', '\x3', '\x2', 
		'\x37', '\x3', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '$', 
		'\x13', '\x2', '\x39', ':', '\x5', '\x4', '\x3', '\x2', ':', 'I', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x5', '\"', '\x12', '\x2', '<', '=', '\x5', 
		'\x4', '\x3', '\x2', '=', 'I', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', 
		'\xE', '\b', '\x2', '?', '@', '\x5', '\x4', '\x3', '\x2', '@', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x5', '\x16', '\f', '\x2', '\x42', 
		'\x43', '\x5', '\x4', '\x3', '\x2', '\x43', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x5', '\x1E', '\x10', '\x2', '\x45', '\x46', '\x5', 
		'\x4', '\x3', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x38', '\x3', '\x2', '\x2', '\x2', 'H', 
		';', '\x3', '\x2', '\x2', '\x2', 'H', '>', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x41', '\x3', '\x2', '\x2', '\x2', 'H', '\x44', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\a', '\x3', '\x2', '\x2', 'K', 'L', '\a', '#', 
		'\x2', '\x2', 'L', 'X', '\a', '\x4', '\x2', '\x2', 'M', 'N', '\a', '\x3', 
		'\x2', '\x2', 'N', 'O', '\a', '#', '\x2', '\x2', 'O', 'T', '\x5', '\x30', 
		'\x19', '\x2', 'P', 'Q', '\a', '\x5', '\x2', '\x2', 'Q', 'S', '\x5', '\x30', 
		'\x19', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'J', '\x3', '\x2', '\x2', '\x2', 'W', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'X', '\a', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', 
		'\a', '#', '\x2', '\x2', 'Z', '[', '\a', '\x6', '\x2', '\x2', '[', '\\', 
		'\x5', '\x30', '\x19', '\x2', '\\', '\t', '\x3', '\x2', '\x2', '\x2', 
		']', '^', '\a', '\a', '\x2', '\x2', '^', '_', '\x5', '\x30', '\x19', '\x2', 
		'_', '\v', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '\b', '\x2', 
		'\x2', '\x61', '\x62', '\a', '\t', '\x2', '\x2', '\x62', '\x63', '\a', 
		'#', '\x2', '\x2', '\x63', '\r', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\a', '\n', '\x2', '\x2', '\x65', '\x66', '\x5', '\x30', '\x19', '\x2', 
		'\x66', 'g', '\a', '\v', '\x2', '\x2', 'g', 'o', '\x5', '&', '\x14', '\x2', 
		'h', 'i', '\a', '\f', '\x2', '\x2', 'i', 'j', '\x5', '\x30', '\x19', '\x2', 
		'j', 'k', '\a', '\v', '\x2', '\x2', 'k', 'l', '\x5', '&', '\x14', '\x2', 
		'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'h', '\x3', '\x2', '\x2', '\x2', 
		'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 't', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\r', '\x2', '\x2', 
		's', 'u', '\x5', '&', '\x14', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '\xE', '\x2', '\x2', 'w', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '\n', '\x2', '\x2', 'y', 'z', '\x5', '\x30', '\x19', 
		'\x2', 'z', '{', '\a', '\v', '\x2', '\x2', '{', '\x83', '\x5', '(', '\x15', 
		'\x2', '|', '}', '\a', '\f', '\x2', '\x2', '}', '~', '\x5', '\x30', '\x19', 
		'\x2', '~', '\x7F', '\a', '\v', '\x2', '\x2', '\x7F', '\x80', '\x5', '(', 
		'\x15', '\x2', '\x80', '\x82', '\x3', '\x2', '\x2', '\x2', '\x81', '|', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x88', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\r', '\x2', '\x2', 
		'\x87', '\x89', '\x5', '(', '\x15', '\x2', '\x88', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\xE', '\x2', '\x2', 
		'\x8B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\n', 
		'\x2', '\x2', '\x8D', '\x8E', '\x5', '\x30', '\x19', '\x2', '\x8E', '\x8F', 
		'\a', '\v', '\x2', '\x2', '\x8F', '\x97', '\x5', ',', '\x17', '\x2', '\x90', 
		'\x91', '\a', '\f', '\x2', '\x2', '\x91', '\x92', '\x5', '\x30', '\x19', 
		'\x2', '\x92', '\x93', '\a', '\v', '\x2', '\x2', '\x93', '\x94', '\x5', 
		',', '\x17', '\x2', '\x94', '\x96', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\r', '\x2', 
		'\x2', '\x9B', '\x9D', '\x5', ',', '\x17', '\x2', '\x9C', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\xE', '\x2', 
		'\x2', '\x9F', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', 
		'\n', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\x30', '\x19', '\x2', '\xA2', 
		'\xA3', '\a', '\v', '\x2', '\x2', '\xA3', '\xAB', '\x5', '.', '\x18', 
		'\x2', '\xA4', '\xA5', '\a', '\f', '\x2', '\x2', '\xA5', '\xA6', '\x5', 
		'\x30', '\x19', '\x2', '\xA6', '\xA7', '\a', '\v', '\x2', '\x2', '\xA7', 
		'\xA8', '\x5', '.', '\x18', '\x2', '\xA8', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'\r', '\x2', '\x2', '\xAF', '\xB1', '\x5', '.', '\x18', '\x2', '\xB0', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', 
		'\xE', '\x2', '\x2', '\xB3', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\a', '\xF', '\x2', '\x2', '\xB5', '\xB6', '\a', '#', '\x2', '\x2', 
		'\xB6', '\xBC', '\a', '\x10', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x11', 
		'\x2', '\x2', '\xB8', '\xB9', '\x5', '\x34', '\x1B', '\x2', '\xB9', '\xBA', 
		'\a', '\x12', '\x2', '\x2', '\xBA', '\xBB', '\x5', '&', '\x14', '\x2', 
		'\xBB', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\r', 
		'\x2', '\x2', '\xC1', '\xC3', '\x5', '&', '\x14', '\x2', '\xC2', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\xE', 
		'\x2', '\x2', '\xC5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', 
		'\a', '\xF', '\x2', '\x2', '\xC7', '\xC8', '\a', '#', '\x2', '\x2', '\xC8', 
		'\xCE', '\a', '\x10', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x11', '\x2', 
		'\x2', '\xCA', '\xCB', '\x5', '\x34', '\x1B', '\x2', '\xCB', '\xCC', '\a', 
		'\x12', '\x2', '\x2', '\xCC', '\xCD', '\x5', '(', '\x15', '\x2', '\xCD', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\a', '\r', '\x2', 
		'\x2', '\xD3', '\xD5', '\x5', '(', '\x15', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\xE', '\x2', 
		'\x2', '\xD7', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		'\xF', '\x2', '\x2', '\xD9', '\xDA', '\a', '#', '\x2', '\x2', '\xDA', 
		'\xE0', '\a', '\x10', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x11', '\x2', 
		'\x2', '\xDC', '\xDD', '\x5', '\x34', '\x1B', '\x2', '\xDD', '\xDE', '\a', 
		'\x12', '\x2', '\x2', '\xDE', '\xDF', '\x5', ',', '\x17', '\x2', '\xDF', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\r', '\x2', 
		'\x2', '\xE5', '\xE7', '\x5', ',', '\x17', '\x2', '\xE6', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', '\xE', '\x2', 
		'\x2', '\xE9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', 
		'\xF', '\x2', '\x2', '\xEB', '\xEC', '\a', '#', '\x2', '\x2', '\xEC', 
		'\xF2', '\a', '\x10', '\x2', '\x2', '\xED', '\xEE', '\a', '\x11', '\x2', 
		'\x2', '\xEE', '\xEF', '\x5', '\x34', '\x1B', '\x2', '\xEF', '\xF0', '\a', 
		'\x12', '\x2', '\x2', '\xF0', '\xF1', '\x5', '.', '\x18', '\x2', '\xF1', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\r', '\x2', 
		'\x2', '\xF7', '\xF9', '\x5', '.', '\x18', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', '\xE', '\x2', 
		'\x2', '\xFB', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', 
		'\x13', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x30', '\x19', '\x2', '\xFE', 
		'\xFF', '\a', '\v', '\x2', '\x2', '\xFF', '\x100', '\x5', ',', '\x17', 
		'\x2', '\x100', '\x101', '\a', '\xE', '\x2', '\x2', '\x101', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\x13', '\x2', '\x2', '\x103', 
		'\x104', '\x5', '\x30', '\x19', '\x2', '\x104', '\x105', '\a', '\v', '\x2', 
		'\x2', '\x105', '\x106', '\x5', '.', '\x18', '\x2', '\x106', '\x107', 
		'\a', '\xE', '\x2', '\x2', '\x107', '!', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\a', '#', '\x2', '\x2', '\x109', '\x10A', '\a', '\x3', '\x2', 
		'\x2', '\x10A', '\x10B', '\a', '\x4', '\x2', '\x2', '\x10B', '\x10C', 
		'\a', '\x14', '\x2', '\x2', '\x10C', '\x10D', '\x5', '(', '\x15', '\x2', 
		'\x10D', '\x10E', '\a', '\xE', '\x2', '\x2', '\x10E', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '#', '\x2', '\x2', '\x110', 
		'\x111', '\a', '\x3', '\x2', '\x2', '\x111', '\x116', '\a', '#', '\x2', 
		'\x2', '\x112', '\x113', '\a', '\x5', '\x2', '\x2', '\x113', '\x115', 
		'\a', '#', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x118', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\a', '\x14', '\x2', '\x2', '\x11A', '\x11B', 
		'\x5', '(', '\x15', '\x2', '\x11B', '\x11C', '\a', '\xE', '\x2', '\x2', 
		'\x11C', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x12F', '\x5', '\n', '\x6', 
		'\x2', '\x120', '\x12F', '\x5', '\x6', '\x4', '\x2', '\x121', '\x122', 
		'\a', '#', '\x2', '\x2', '\x122', '\x123', '\a', '\x15', '\x2', '\x2', 
		'\x123', '\x12F', '\x5', '\x30', '\x19', '\x2', '\x124', '\x125', '\a', 
		'#', '\x2', '\x2', '\x125', '\x126', '\a', '\x6', '\x2', '\x2', '\x126', 
		'\x127', '\x5', '\x30', '\x19', '\x2', '\x127', '\x128', '\a', '\x15', 
		'\x2', '\x2', '\x128', '\x129', '\x5', '\x30', '\x19', '\x2', '\x129', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\a', '\x16', '\x2', 
		'\x2', '\x12B', '\x12C', '\a', '#', '\x2', '\x2', '\x12C', '\x12D', '\a', 
		'\t', '\x2', '\x2', '\x12D', '\x12F', '\x5', '\x30', '\x19', '\x2', '\x12E', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x121', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '%', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x5', '$', 
		'\x13', '\x2', '\x131', '\x132', '\x5', '&', '\x14', '\x2', '\x132', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x5', '\xE', '\b', '\x2', 
		'\x134', '\x135', '\x5', '&', '\x14', '\x2', '\x135', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\x5', '\x16', '\f', '\x2', '\x137', 
		'\x138', '\x5', '&', '\x14', '\x2', '\x138', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13A', '\x5', '\x1E', '\x10', '\x2', '\x13A', '\x13B', 
		'\x5', '&', '\x14', '\x2', '\x13B', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x133', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x140', '\x5', '$', '\x13', '\x2', '\x140', 
		'\x141', '\x5', '(', '\x15', '\x2', '\x141', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x143', '\x5', '\x10', '\t', '\x2', '\x143', '\x144', 
		'\x5', '(', '\x15', '\x2', '\x144', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x146', '\x5', '\x18', '\r', '\x2', '\x146', '\x147', '\x5', 
		'(', '\x15', '\x2', '\x147', '\x150', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x149', '\x5', ' ', '\x11', '\x2', '\x149', '\x14A', '\x5', '(', '\x15', 
		'\x2', '\x14A', '\x150', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', 
		'\x5', '*', '\x16', '\x2', '\x14C', '\x14D', '\x5', '(', '\x15', '\x2', 
		'\x14D', '\x150', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x150', ')', '\x3', '\x2', '\x2', '\x2', '\x151', '\x153', '\a', '\x17', 
		'\x2', '\x2', '\x152', '\x154', '\a', '\x4', '\x2', '\x2', '\x153', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x158', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\a', 
		'\x17', '\x2', '\x2', '\x156', '\x158', '\x5', '\x30', '\x19', '\x2', 
		'\x157', '\x151', '\x3', '\x2', '\x2', '\x2', '\x157', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '+', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15A', '\x5', '$', '\x13', '\x2', '\x15A', '\x15B', '\x5', ',', '\x17', 
		'\x2', '\x15B', '\x169', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
		'\x5', '\x12', '\n', '\x2', '\x15D', '\x15E', '\x5', ',', '\x17', '\x2', 
		'\x15E', '\x169', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x5', 
		'\x1A', '\xE', '\x2', '\x160', '\x161', '\x5', ',', '\x17', '\x2', '\x161', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x5', '\x1E', 
		'\x10', '\x2', '\x163', '\x164', '\x5', ',', '\x17', '\x2', '\x164', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\t', '\x2', '\x2', '\x2', 
		'\x166', '\x169', '\x5', ',', '\x17', '\x2', '\x167', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x159', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x168', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x162', '\x3', '\x2', '\x2', '\x2', '\x168', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x169', '-', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\x5', '$', 
		'\x13', '\x2', '\x16B', '\x16C', '\x5', '.', '\x18', '\x2', '\x16C', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\x5', '\x14', '\v', '\x2', 
		'\x16E', '\x16F', '\x5', '.', '\x18', '\x2', '\x16F', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x171', '\x5', '\x1C', '\xF', '\x2', '\x171', 
		'\x172', '\x5', '.', '\x18', '\x2', '\x172', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x174', '\x5', ' ', '\x11', '\x2', '\x174', '\x175', 
		'\x5', '.', '\x18', '\x2', '\x175', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x177', '\t', '\x2', '\x2', '\x2', '\x177', '\x17D', '\x5', 
		'.', '\x18', '\x2', '\x178', '\x179', '\x5', '*', '\x16', '\x2', '\x179', 
		'\x17A', '\x5', '.', '\x18', '\x2', '\x17A', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x170', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x176', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '/', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x5', 
		'\x32', '\x1A', '\x2', '\x17F', '\x31', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x181', '\b', '\x1A', '\x1', '\x2', '\x181', '\x182', '\a', '\x1A', '\x2', 
		'\x2', '\x182', '\x183', '\x5', '\x32', '\x1A', '\x2', '\x183', '\x184', 
		'\a', '\x1B', '\x2', '\x2', '\x184', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x186', '\a', '\x1E', '\x2', '\x2', '\x186', '\x18F', '\x5', 
		'\x32', '\x1A', '\xF', '\x187', '\x188', '\a', '*', '\x2', '\x2', '\x188', 
		'\x18F', '\x5', '\x32', '\x1A', '\xE', '\x189', '\x18F', '\x5', '\x34', 
		'\x1B', '\x2', '\x18A', '\x18F', '\a', '#', '\x2', '\x2', '\x18B', '\x18F', 
		'\x5', '\b', '\x5', '\x2', '\x18C', '\x18F', '\x5', '\x6', '\x4', '\x2', 
		'\x18D', '\x18F', '\x5', '\f', '\a', '\x2', '\x18E', '\x180', '\x3', '\x2', 
		'\x2', '\x2', '\x18E', '\x185', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18B', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x191', '\f', '\r', '\x2', '\x2', '\x191', '\x192', '\a', 
		'(', '\x2', '\x2', '\x192', '\x1A3', '\x5', '\x32', '\x1A', '\xE', '\x193', 
		'\x194', '\f', '\f', '\x2', '\x2', '\x194', '\x195', '\t', '\x3', '\x2', 
		'\x2', '\x195', '\x1A3', '\x5', '\x32', '\x1A', '\r', '\x196', '\x197', 
		'\f', '\v', '\x2', '\x2', '\x197', '\x198', '\a', '\x1F', '\x2', '\x2', 
		'\x198', '\x1A3', '\x5', '\x32', '\x1A', '\f', '\x199', '\x19A', '\f', 
		'\n', '\x2', '\x2', '\x19A', '\x19B', '\a', ' ', '\x2', '\x2', '\x19B', 
		'\x1A3', '\x5', '\x32', '\x1A', '\v', '\x19C', '\x19D', '\f', '\t', '\x2', 
		'\x2', '\x19D', '\x19E', '\a', '!', '\x2', '\x2', '\x19E', '\x1A3', '\x5', 
		'\x32', '\x1A', '\n', '\x19F', '\x1A0', '\f', '\b', '\x2', '\x2', '\x1A0', 
		'\x1A1', '\a', '\"', '\x2', '\x2', '\x1A1', '\x1A3', '\x5', '\x32', '\x1A', 
		'\t', '\x1A2', '\x190', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x199', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x1A2', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1A8', '\t', '\x4', '\x2', '\x2', '\x1A8', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '!', 'H', 'T', 'W', 'o', 't', '\x83', '\x88', '\x97', '\x9C', 
		'\xAB', '\xB0', '\xBE', '\xC2', '\xD0', '\xD4', '\xE2', '\xE6', '\xF4', 
		'\xF8', '\x116', '\x11D', '\x12E', '\x13D', '\x14F', '\x153', '\x157', 
		'\x168', '\x17C', '\x18E', '\x1A2', '\x1A4',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
